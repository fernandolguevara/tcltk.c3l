module tcltk;

import libc;

const CInt F_OK = 00;
const CInt X_OK = 01;
const CInt W_OK = 02;
const CInt R_OK = 04;

const CInt TCL_OK = 0;
const CInt TCL_ERROR = 1;
const CInt TCL_RETURN = 2;
const CInt TCL_BREAK = 3;
const CInt TCL_CONTINUE =4;

const CInt TCL_DONT_WAIT = (1<<1);
const CInt TCL_WINDOW_EVENTS = (1<<2);
const CInt TCL_FILE_EVENTS = (1<<3);
const CInt TCL_TIMER_EVENTS = (1<<4);
const CInt TCL_IDLE_EVENTS = (1<<5);
const CInt TCL_ALL_EVENTS = (~TCL_DONT_WAIT);

const CInt TCL_GLOBAL_ONLY = 1;
const CInt TCL_NAMESPACE_ONLY = 2;
const CInt TCL_APPEND_VALUE = 4;
const CInt TCL_LIST_ELEMENT = 8;
const CInt TCL_TRACE_READS = 0x10;
const CInt TCL_TRACE_WRITES = 0x20;
const CInt TCL_TRACE_UNSETS = 0x40;
const CInt TCL_TRACE_DESTROYED = 0x80;
const CInt TCL_INTERP_DESTROYED = 0x100;
const CInt TCL_LEAVE_ERR_MSG = 0x200;
const CInt TCL_TRACE_ARRAY = 0x800;

def Stat = void;

def Tcl_Size = CInt;

struct Tcl_DString {
    ZString string;
    Tcl_Size length;
    Tcl_Size spaceAvl;
    CChar[200] staticSpace;
}

struct Tcl_ChannelType {
    CChar* typeName;
    Tcl_ChannelTypeVersion version;
    void *closeProc;	
    Tcl_DriverInputProc *inputProc;
    Tcl_DriverOutputProc *outputProc;
    void *seekProc;	
    Tcl_DriverSetOptionProc *setOptionProc;
    Tcl_DriverGetOptionProc *getOptionProc;
    Tcl_DriverWatchProc *watchProc;
    Tcl_DriverGetHandleProc *getHandleProc;
    Tcl_DriverClose2Proc *close2Proc;
    Tcl_DriverBlockModeProc *blockModeProc;
    Tcl_DriverFlushProc *flushProc;
    Tcl_DriverHandlerProc *handlerProc;
    Tcl_DriverWideSeekProc *wideSeekProc;
    Tcl_DriverThreadActionProc *threadActionProc;
    Tcl_DriverTruncateProc *truncateProc;
}

def ClientData = CInt;
def Tcl_AsyncHandler = void*;
def Tcl_Channel = void*;
def Tcl_ChannelTypeVersion = CInt;
def Tcl_CmdInfo = void;
def Tcl_Command = void;
def Tcl_Condition = void;
def Tcl_Event = void;
def Tcl_Interp = void;
def Tcl_Mutex = void;
def Tcl_Namespace = void;
def Tcl_Obj = void;
def Tcl_QueuePosition = CInt;
def Tcl_StatBuf = void;
def Tcl_ThreadDataKey = void;
def Tcl_ThreadId = CChar*;
def Tcl_Time = void;
def Tcl_UniChar = void;
def Tcl_WideInt = CLong;

const Tcl_QueuePosition TCL_QUEUE_TAIL = 1;
const Tcl_QueuePosition TCL_QUEUE_HEAD = 2;
const Tcl_QueuePosition TCL_QUEUE_MARK = 3;
const Tcl_QueuePosition TCL_QUEUE_ALERT_IF_EMPTY = 4;

def Tcl_AlertNotifierProc = fn void(ClientData client_data);
def Tcl_AsyncProc = fn void (ClientData clientData, Tcl_Interp *interp, CInt code);
def Tcl_CmdDeleteProc = fn void(ClientData client_data);
def Tcl_CmdProc = fn void(ClientData client_data, Tcl_Interp *interp, int argc, CChar* argv);
def Tcl_CreateFileHandlerProc = fn void(Fd fd, CInt mask, Tcl_FileProc proc, ClientData client_data);
def Tcl_DeleteFileHandlerProc = fn void(Fd fd);
def Tcl_DriverBlockModeProc = fn CInt(ClientData instance_data, int mode);
def Tcl_DriverClose2Proc = fn CInt(ClientData instance_data, Tcl_Interp *interp, CInt flags);
def Tcl_DriverCloseProc = fn CInt(ClientData instance_data, Tcl_Interp *interp);
def Tcl_DriverFlushProc = fn CInt(ClientData instance_data);
def Tcl_DriverGetHandleProc = fn CInt(ClientData instance_data, CInt direction, ClientData* handle_ptr);
def Tcl_DriverGetOptionProc = fn CInt(ClientData instance_data, Tcl_Interp *interp, ZString option_name, Tcl_DString* optionValue);
def Tcl_DriverHandlerProc = fn CInt(ClientData instance_data, CInt interestMask);
def Tcl_DriverInputProc = fn CInt(ClientData instance_data, CChar* buf, CInt buf_size, CInt* error_code_ptr);
def Tcl_DriverOutputProc = fn CInt(ClientData instance_data, CChar* buf, CInt to_write, CInt* error_code_ptr);
def Tcl_DriverSeekProc = fn CInt(ClientData instance_data, CLong offset, CInt seek_mode, CInt* error_code_ptr);
def Tcl_DriverSetOptionProc = fn CInt(ClientData instance_data, Tcl_Interp *interp, ZString option_name, ZString* new_value);
def Tcl_DriverThreadActionProc = fn void(ClientData instance_data, CInt action);
def Tcl_DriverTruncateProc =  fn void(ClientData instance_data, Tcl_WideInt length);
def Tcl_DriverWatchProc = fn void(ClientData instance_data, CInt mask);
def Tcl_DriverWideSeekProc = fn Tcl_WideInt(ClientData instance_data, Tcl_WideInt offset, CInt seek_mode, CInt* error_code_ptr);
def Tcl_EventCheckProc = fn void (ClientData client_data, CInt flags);
def Tcl_EventDeleteProc = fn CInt (Tcl_Event* ev_ptr, ClientData client_data);
def Tcl_EventSetupProc = fn void (ClientData client_data, CInt flags);
def Tcl_ExitProc = fn void (ClientData client_data);
def Tcl_FileProc = fn void(ClientData client_data, CInt mask);
def Tcl_FinalizeNotifierProc = fn void(ClientData client_data);
def Tcl_IdleProc = fn void(ClientData client_data);
def Tcl_InitNotifierProc = fn void();
def Tcl_InterpDeleteProc = fn void(ClientData client_data, Tcl_Interp* interp);
def Tcl_ObjCmdProc = fn void (ClientData clientData, Tcl_Interp *interp, CInt objc, Tcl_Obj* objv);
def Tcl_ServiceModeHookProc = fn void(CInt mode);
def Tcl_SetTimerProc = fn void(Tcl_Time* time_ptr);
def Tcl_ThreadCreateProc = fn void(ClientData client_data);
def Tcl_WaitForEventProc = fn CInt(Tcl_Time* time_ptr);

struct Tcl_NotifierProcs {
    Tcl_SetTimerProc *setTimerProc;
    Tcl_WaitForEventProc *waitForEventProc;
    Tcl_CreateFileHandlerProc *createFileHandlerProc;
    Tcl_DeleteFileHandlerProc *deleteFileHandlerProc;
    Tcl_InitNotifierProc *initNotifierProc;
    Tcl_FinalizeNotifierProc *finalizeNotifierProc;
    Tcl_AlertNotifierProc *alertNotifierProc;
    Tcl_ServiceModeHookProc *serviceModeHookProc;
}

extern fn CChar tcl_backslash(ZString src, CInt* count_ptr) @extern("Tcl_Backslash");  
extern fn CChar* tcl_alloc(CUInt size) @extern("Tcl_Alloc");
extern fn CChar* tcl_attempt_alloc(CUInt size) @extern("Tcl_AttemptAlloc");
extern fn CChar* tcl_attempt_realloc(CChar* ptr, CUInt size) @extern("Tcl_AttemptRealloc");
extern fn CChar* tcl_dstring_append_element(Tcl_DString* ds_ptr, CChar* element) @extern("Tcl_DStringAppendElement");
extern fn CChar* tcl_dstring_append(Tcl_DString* ds_ptr, CChar* bytes, CInt length) @extern("Tcl_DStringAppend");
macro ZString tcl_dstring_value(Tcl_DString* ds_ptr) => ds_ptr.string;
extern fn CChar* tcl_get_cwd(Tcl_Interp* interp, Tcl_DString* buffer_ptr) @extern("Tcl_GetCwd");
extern fn CChar* tcl_realloc(CChar* ptr, CUInt size) @extern("Tcl_Realloc");
extern fn CInt tcl_access(ZString path, CInt mode) @extern("Tcl_Access");
extern fn CInt tcl_app_init(Tcl_Interp* interp) @extern("Tcl_AppInit");  
extern fn CInt tcl_async_invoke(Tcl_Interp* interp, CInt code) @extern("Tcl_AsyncInvoke");  
extern fn CInt tcl_async_ready() @extern("Tcl_AsyncReady");  
extern fn CInt tcl_attempt_set_obj_length(Tcl_Obj* obj_ptr, CInt new_length) @extern("Tcl_AttemptSetObjLength");
extern fn CInt tcl_bad_channel_option(Tcl_Interp* interp, CChar* option_name, CChar* option_list) @extern("Tcl_BadChannelOption");  
extern fn CInt tcl_cancel_eval(Tcl_Interp* interp, Tcl_Obj* result_obj_ptr, ClientData client_data, CInt flags) @extern("Tcl_CancelEval");  
extern fn CInt tcl_canceled(Tcl_Interp* interp, CInt flags) @extern("Tcl_Canceled");  
extern fn CInt tcl_chdir(Tcl_Interp* interp, CChar* dir_name) @extern("Tcl_Chdir");
extern fn CInt tcl_channel_buffered(Tcl_Channel channel) @extern("Tcl_ChannelBuffered");  
extern fn CInt tcl_create_alias_obj(Tcl_Interp* child_interp, ZString child_cmd, Tcl_Interp* target_interp, ZString target_cmd, CInt objc, Tcl_Obj** objv) @extern("Tcl_CreateAliasObj");
extern fn CInt tcl_create_alias(Tcl_Interp* child_interp, ZString child_cmd, Tcl_Interp* target_interp, ZString target_cmd, CInt argc, CChar** argv) @extern("Tcl_CreateAlias");
extern fn CInt tcl_create_command(Tcl_Interp* interp, ZString cmd_name, Tcl_CmdProc proc, ClientData client_data, Tcl_CmdDeleteProc delete_proc) @extern("Tcl_CreateCommand");
extern fn CInt tcl_create_obj_command(Tcl_Interp* interp, ZString cmd_name, Tcl_ObjCmdProc proc, ClientData client_data, Tcl_CmdDeleteProc delete_proc) @extern("Tcl_CreateObjCommand");
extern fn CInt tcl_create_thread(Tcl_ThreadId* id_ptr, Tcl_ThreadCreateProc proc, ClientData client_data, CInt stack_size, CInt flags) @extern("Tcl_CreateThread");
extern fn CInt tcl_delete_command_from_token(Tcl_Interp* interp, Tcl_Command* token) @extern("Tcl_DeleteCommandFromToken");
extern fn CInt tcl_delete_command(Tcl_Interp* interp, ZString cmd_name) @extern("Tcl_DeleteCommand");
extern fn CInt tcl_do_one_event(CInt flags) @extern("Tcl_DoOneEvent");  
macro CInt tcl_dstring_length(Tcl_DString* ds_ptr) => ds_ptr.length;
extern fn CInt tcl_eval_ex(Tcl_Interp* interp,  ZString script, CInt num_bytes, CInt flags) @extern("Tcl_EvalEx");  
extern fn CInt tcl_eval_file(Tcl_Interp* interp, ZString filename) @extern("Tcl_EvalFile");  
extern fn CInt tcl_eval_obj_ex(Tcl_Interp* interp, Tcl_Obj* obj_ptr, CInt flags) @extern("Tcl_EvalObjEx");  
extern fn CInt tcl_eval_objv(Tcl_Interp* interp,  Tcl_Obj* objc, Tcl_Obj* objv, CInt flags) @extern("Tcl_EvalObjv");  
extern fn CInt tcl_eval(Tcl_Interp* interp, ZString script) @extern("Tcl_Eval");  
extern fn CInt tcl_expose_command(Tcl_Interp* interp, ZString hidden_cmd_name, ZString cmd_name) @extern("Tcl_ExposeCommand");
extern fn CInt tcl_get_alias_obj(Tcl_Interp* interp, ZString child_cmd, Tcl_Interp** target_interp_ptr, CChar** target_cmd_ptr, CInt* objc_ptr, Tcl_Obj*** objcv_ptr) @extern("Tcl_GetAliasObj");
extern fn CInt tcl_get_alias(Tcl_Interp* interp, ZString child_cmd, Tcl_Interp** target_interp_ptr, CChar** target_cmd_ptr, CInt* argc_ptr, CChar*** argv_ptr) @extern("Tcl_GetAlias");
extern fn CInt tcl_get_boolean(Tcl_Interp* interp, ZString src, CInt* int_ptr) @extern("Tcl_GetBoolean");
extern fn CInt tcl_get_command_info_from_token(Tcl_Command* token, Tcl_CmdInfo* info_ptr) @extern("Tcl_GetCommandInfoFromToken");
extern fn CInt tcl_get_command_info(Tcl_Interp* interp, ZString cmd_name, Tcl_CmdInfo* info_ptr) @extern("Tcl_GetCommandInfo");
extern fn CInt tcl_get_double(Tcl_Interp* interp, ZString src, CLong* double_ptr) @extern("Tcl_GetDouble");
extern fn CInt tcl_get_int(Tcl_Interp* interp, ZString src, CInt* int_ptr) @extern("Tcl_GetInt");
extern fn CInt tcl_get_service_mode() @extern("Tcl_GetServiceMode");
extern fn CInt tcl_global_eval_obj(Tcl_Interp* interp, Tcl_Obj* obj_ptr) @extern("Tcl_GlobalEvalObj");  
extern fn CInt tcl_global_eval(Tcl_Interp* interp,  ZString script) @extern("Tcl_GlobalEval");  
extern fn CInt tcl_hide_command(Tcl_Interp* interp, ZString cmd_name, ZString hidden_cmd_name) @extern("Tcl_HideCommand");
extern fn CInt tcl_init(Tcl_Interp* interp) @extern("Tcl_Init");  
extern fn CInt tcl_interp_path(Tcl_Interp* interp, Tcl_Interp* child_interp) @extern("Tcl_GetInterpPath");
extern fn CInt tcl_is_safe(Tcl_Interp* interp) @extern("Tcl_IsSafe");
extern fn CInt tcl_join_thread(Tcl_ThreadId id, CInt* result) @extern("Tcl_JoinThread");
extern fn CInt tcl_make_safe(Tcl_Interp* interp) @extern("Tcl_MakeSafe");
extern fn CInt tcl_service_all() @extern("Tcl_ServiceAll");
extern fn CInt tcl_service_event(CInt flags) @extern("Tcl_ServiceEvent");
extern fn CInt tcl_service_mode_hook(CInt mode) @extern("Tcl_ServiceModeHook");
extern fn CInt tcl_set_command_info_from_token(Tcl_Command* token, Tcl_CmdInfo* info_ptr) @extern("Tcl_GetCommandInfoFromToken");
extern fn CInt tcl_set_command_info(Tcl_Interp* interp, ZString cmd_name, Tcl_CmdInfo* info_ptr) @extern("Tcl_SetCommandInfo");
extern fn CInt tcl_set_return_options(Tcl_Interp* interp, Tcl_Obj* options) @extern("Tcl_SetReturnOptions");
extern fn CInt tcl_set_service_mode(CInt mode) @extern("Tcl_SetServiceMode");
extern fn CInt tcl_set_timer(Tcl_Time* time_ptr) @extern("Tcl_SetTimer");
extern fn CInt tcl_sleep(CInt ms) @extern("Tcl_Sleep");
extern fn CInt tcl_stat(ZString path, Stat* stat_ptr) @extern("Tcl_Stat");
extern fn CInt tcl_var_eval_va(Tcl_Interp* interp, CInt list) @extern("Tcl_VarEvalVA");
extern fn CInt tcl_var_eval(Tcl_Interp* interp, ZString ...part) @extern("Tcl_VarEval");  
extern fn CInt tcl_wait_for_event(Tcl_Time* time_ptr) @extern("Tcl_WaitForEvent");
extern fn CInt tk_init(Tcl_Interp* interp) @extern("Tk_Init");  
extern fn CInt tk_safe_init(Tcl_Interp* interp) @extern("Tk_SafeInit");  
extern fn ClientData tcl_init_notifier() @extern("Tcl_InitNotifier");
extern fn Tcl_AsyncHandler tcl_async_create(Tcl_AsyncProc proc, ClientData client_data) @extern("Tcl_AsyncCreate");  
extern fn Tcl_ChannelTypeVersion tcl_channel_version(Tcl_ChannelType* type_ptr) @extern("Tcl_ChannelVersion");      
extern fn Tcl_Command* tcl_get_command_from_obj(Tcl_Interp* interp, Tcl_Obj* obj_ptr) @extern("Tcl_GetCommandFromObj");
extern fn Tcl_DriverBlockModeProc tcl_channel_block_mode_proc(Tcl_ChannelType* type_ptr) @extern("Tcl_ChannelBlockModeProc");  
extern fn Tcl_DriverClose2Proc tcl_channel_close_2_proc(Tcl_ChannelType* type_ptr) @extern("Tcl_ChannelClose2Proc");  
extern fn Tcl_DriverCloseProc tcl_channel_close_proc(Tcl_ChannelType* type_ptr) @extern("Tcl_ChannelCloseProc");  
extern fn Tcl_DriverFlushProc tcl_channel_flush_proc(Tcl_ChannelType* type_ptr) @extern("Tcl_ChannelFlushProc");  
extern fn Tcl_DriverGetHandleProc tcl_channel_get_handle_proc(Tcl_ChannelType* type_ptr) @extern("Tcl_ChannelGetHandleProc");  
extern fn Tcl_DriverGetOptionProc tcl_channel_get_option_proc(Tcl_ChannelType* type_ptr) @extern("Tcl_ChannelGetOptionProc");  
extern fn Tcl_DriverHandlerProc tcl_channel_handler_proc(Tcl_ChannelType* type_ptr) @extern("Tcl_ChannelHandlerProc");  
extern fn Tcl_DriverInputProc tcl_channel_input_proc(Tcl_ChannelType* type_ptr) @extern("Tcl_ChannelInputProc");  
extern fn Tcl_DriverOutputProc tcl_channel_output_proc(Tcl_ChannelType* type_ptr) @extern("Tcl_ChannelOutputProc");  
extern fn Tcl_DriverSeekProc tcl_channel_seek_proc(Tcl_ChannelType* type_ptr) @extern("Tcl_ChannelSeekProc");  
extern fn Tcl_DriverSetOptionProc tcl_channel_set_option_proc(Tcl_ChannelType* type_ptr) @extern("Tcl_ChannelSetOptionProc");  
extern fn Tcl_DriverThreadActionProc tcl_channel_thread_action_proc(Tcl_ChannelType* type_ptr) @extern("Tcl_ChannelThreadActionProc");  
extern fn Tcl_DriverTruncateProc tcl_channel_truncate_proc(Tcl_ChannelType* type_ptr) @extern("Tcl_ChannelTruncateProc");  
extern fn Tcl_DriverWatchProc tcl_channel_watch_proc(Tcl_ChannelType* type_ptr) @extern("Tcl_ChannelWatchProc");      
extern fn Tcl_DriverWideSeekProc tcl_channel_wide_seek_proc(Tcl_ChannelType* type_ptr) @extern("Tcl_ChannelWideSeekProc");      
extern fn Tcl_Interp* tcl_create_child(Tcl_Interp* interp, ZString name, CInt is_safe) @extern("Tcl_CreateChild");
extern fn Tcl_Interp* tcl_create_interp() @extern("Tcl_CreateInterp");  
extern fn Tcl_Interp* tcl_create_slave(Tcl_Interp* interp, ZString name, CInt is_safe) @extern("Tcl_CreateSlave");
extern fn Tcl_Interp* tcl_get_child(Tcl_Interp* interp, ZString name) @extern("Tcl_GetChild");
extern fn Tcl_Interp* tcl_get_master(Tcl_Interp* interp) @extern("Tcl_GetMaster");
extern fn Tcl_Interp* tcl_get_parent(Tcl_Interp* interp) @extern("Tcl_GetParent");
extern fn Tcl_Interp* tcl_get_slave(Tcl_Interp* interp, ZString name) @extern("Tcl_GetSlave");
extern fn Tcl_Obj* tcl_get_return_options(Tcl_Interp* interp, CInt code) @extern("Tcl_GetReturnOptions");
extern fn Tcl_StatBuf* tcl_alloc_stat_buf() @extern("Tcl_AllocStatBuf");
extern fn Tcl_ThreadId tcl_get_current_thread() @extern("Tcl_GetCurrentThread");
extern fn void tcl_add_error_info(Tcl_Interp* interp, ZString message) @extern("Tcl_AddErrorInfo");
extern fn void tcl_add_obj_error_info(Tcl_Interp* interp, ZString message, CInt length) @extern("Tcl_AddObjErrorInfo");
extern fn void tcl_alert_notifier(ClientData client_data) @extern("Tcl_AlertNotifier");
extern fn void tcl_allow_exceptions(Tcl_Interp* interp) @extern("Tcl_AllowExceptions");
extern fn void tcl_append_all_obj_types(Tcl_Interp* interp, Tcl_Obj* obj_ptr) @extern("Tcl_AppendAllObjTypes");
extern fn void tcl_append_element(Tcl_Interp* interp, CChar* element) @extern("Tcl_AppendElement");
extern fn void tcl_append_export_list(Tcl_Interp* interp, Tcl_Namespace* ns_ptr,Tcl_Obj* obj_ptr) @extern("Tcl_AppendExportList");
extern fn void tcl_append_format_to_obj(Tcl_Interp* interp, Tcl_Obj* obj_ptr, ZString format, CInt objc, Tcl_Obj* objv) @extern("Tcl_AppendFormatToObj");
extern fn void tcl_append_limited_to_obj(Tcl_Obj* obj_ptr, CChar* bytes, CInt length, CInt limit, CChar* ellipsis) @extern("Tcl_AppendLimitedToObj");
extern fn void tcl_append_obj_to_error_info(Tcl_Interp* interp, Tcl_Obj* obj_ptr) @extern("Tcl_AppendObjToErrorInfo");
extern fn void tcl_append_obj_to_obj(Tcl_Obj* obj_ptr, Tcl_Obj* append_obj_ptr) @extern("Tcl_AppendObjToObj");
extern fn void tcl_append_printf_to_obj(Tcl_Obj* obj_ptr, CChar* ...format) @extern("Tcl_AppendPrintfToObj");
extern fn void tcl_append_result(Tcl_Interp* interp, CChar* ...result) @extern("Tcl_AppendResult");
extern fn void tcl_append_strings_to_obj(Tcl_Obj* obj_ptr, CChar* ...string) @extern("Tcl_AppendStringsToObj");
extern fn void tcl_append_to_obj(Tcl_Obj* obj_ptr, CChar* bytes, CInt length) @extern("Tcl_AppendToObj");
extern fn void tcl_append_unicode_to_obj(Tcl_Obj* obj_ptr, Tcl_UniChar* unicode, CInt num_chars) @extern("Tcl_AppendUnicodeToObj");
extern fn void tcl_async_delete(Tcl_AsyncHandler async) @extern("Tcl_AsyncDelete");  
extern fn void tcl_async_mark(Tcl_AsyncHandler async) @extern("Tcl_AsyncMark");  
extern fn void tcl_background_error(Tcl_Interp* interp) @extern("Tcl_BackgroundError");  
extern fn void tcl_background_exception(Tcl_Interp* interp, CInt code) @extern("Tcl_BackgroundException");  
extern fn void tcl_call_when_deleted(Tcl_Interp* interp, Tcl_InterpDeleteProc proc, ClientData client_data) @extern("Tcl_CallWhenDeleted");  
extern fn void tcl_cancel_idle_call(Tcl_IdleProc proc, ClientData client_data) @extern("Tcl_CancelIdleCall");  
extern fn void tcl_condition_finalize(Tcl_Condition* cond_ptr) @extern("Tcl_ConditionFinalize");
extern fn void tcl_condition_notify(Tcl_Condition* cond_ptr) @extern("Tcl_ConditionNotify");
extern fn void tcl_condition_wait(Tcl_Condition* cond_ptr, Tcl_Mutex* mutex_ptr, Tcl_Time* time_ptr) @extern("Tcl_ConditionWait");
extern fn void tcl_create_event_source(Tcl_EventSetupProc setup_proc, Tcl_EventCheckProc check_proc, ClientData client_data) @extern("Tcl_CreateEventSource");
extern fn void tcl_create_exit_handler(Tcl_ExitProc proc, ClientData client_data) @extern("Tcl_CreateExitHandler");  
extern fn void tcl_create_thread_exit_handler(Tcl_ExitProc proc, ClientData client_data) @extern("Tcl_CreateThreadExitHandler");  
extern fn void tcl_delete_event_source(Tcl_EventSetupProc setup_proc, Tcl_EventCheckProc check_proc, ClientData client_data) @extern("Tcl_DeleteEventSource");
extern fn void tcl_delete_events(Tcl_EventDeleteProc delete_proc, ClientData client_data) @extern("Tcl_DeleteEvents");
extern fn void tcl_delete_exit_handler(Tcl_ExitProc proc, ClientData client_data) @extern("Tcl_DeleteExitHandler");  
extern fn void tcl_delete_interp(Tcl_Interp* interp) @extern("Tcl_DeleteInterp");  
extern fn void tcl_delete_thread_exit_handler(Tcl_ExitProc proc, ClientData client_data) @extern("Tcl_DeleteThreadExitHandler");  
extern fn void tcl_do_when_idle(Tcl_IdleProc proc, ClientData client_data) @extern("Tcl_DoWhenIdle");  
extern fn void tcl_dont_call_when_deleted(Tcl_Interp* interp, Tcl_InterpDeleteProc proc, ClientData client_data) @extern("Tcl_DontCallWhenDeleted");  
extern fn void tcl_dstring_end_sublist(Tcl_DString* ds_ptr) @extern("Tcl_DStringEndSublist");
extern fn void tcl_dstring_free(Tcl_DString* ds_ptr) @extern("Tcl_DStringFree");
extern fn void tcl_dstring_get_result(Tcl_Interp* interp, Tcl_DString* ds_ptr) @extern("Tcl_DStringGetResult");
extern fn void tcl_dstring_init(Tcl_DString* ds_ptr) @extern("Tcl_DStringInit");
extern fn void tcl_dstring_result(Tcl_Interp* interp, Tcl_DString* ds_ptr) @extern("Tcl_DStringResult");
extern fn void tcl_dstring_set_length(Tcl_DString* ds_ptr, CInt new_length) @extern("Tcl_DStringSetLength");
extern fn void tcl_dstring_start_sublist(Tcl_DString* ds_ptr) @extern("Tcl_DStringStartSublist");
extern fn void tcl_dstring_trunc(Tcl_DString* ds_ptr, CInt new_length) @extern("Tcl_DStringTrunc");
extern fn void tcl_exit_thread(CInt status) @extern("Tcl_ExitThread");  
extern fn void tcl_exit(CInt status) @extern("Tcl_Exit");  
extern fn void tcl_finalize_notifier(ClientData client_data) @extern("Tcl_FinalizeNotifier");
extern fn void tcl_finalize_thread() @extern("Tcl_FinalizeThread");  
extern fn void tcl_finalize() @extern("Tcl_Finalize");  
extern fn void tcl_free(CChar* ptr) @extern("Tcl_Free");
extern fn void tcl_get_command_full_name(Tcl_Interp* interp, Tcl_Command* token, Tcl_Obj* obj_ptr) @extern("Tcl_GetCommandFullName");
extern fn void tcl_get_error_line(Tcl_Interp* interp) @extern("Tcl_GetErrorLine");
extern fn void tcl_get_memory_info(Tcl_DString* ds_ptr) @extern("Tcl_GetMemoryInfo");
extern fn void tcl_log_command_info(Tcl_Interp* interp, ZString script, ZString command, CInt command_length) @extern("Tcl_LogCommandInfo");
extern fn void tcl_mutex_finalize(Tcl_Mutex* mutex_ptr) @extern("Tcl_MutexFinalize");
extern fn void tcl_mutex_lock(Tcl_Mutex* mutex_ptr) @extern("Tcl_MutexLock");
extern fn void tcl_mutex_unlock(Tcl_Mutex* mutex_ptr) @extern("Tcl_MutexUnlock");
extern fn void tcl_queue_event(Tcl_Event* event_ptr, Tcl_QueuePosition position) @extern("Tcl_QueueEvent");
extern fn void tcl_set_error_code(Tcl_Interp* interp, ZString... element) @extern("Tcl_SetObjErrorCode");
extern fn void tcl_set_error_line(Tcl_Interp* interp, CInt line_num) @extern("Tcl_SetErrorLine");
extern fn void tcl_set_exit_proc(Tcl_ExitProc proc) @extern("Tcl_SetExitProc");  
extern fn void tcl_set_max_block_time(Tcl_Time* time_ptr) @extern("Tcl_SetMaxBlockTime");
extern fn void tcl_set_notifier(Tcl_NotifierProcs* notifier_proc_ptr) @extern("Tcl_SetNotifier");
extern fn void tcl_set_obj_error_code(Tcl_Interp* interp, Tcl_Obj* error_obj_ptr) @extern("Tcl_SetObjErrorCode");
extern fn void tcl_thread_alert(Tcl_ThreadId thread_id) @extern("Tcl_ThreadAlert");
extern fn void tcl_thread_queue_event(Tcl_ThreadId thread_id, Tcl_Event* event_ptr, Tcl_QueuePosition position) @extern("Tcl_ThreadQueueEvent");
extern fn void* tcl_get_thread_data(Tcl_ThreadDataKey* key_ptr, CInt size) @extern("Tcl_GetThreadData");
extern fn ZString tcl_get_channel_name(Tcl_ChannelType* type_ptr) @extern("Tcl_ChannelName");  
extern fn ZString tcl_get_command_name(Tcl_Interp* interp, Tcl_Command* token) @extern("Tcl_GetCommandName");
extern fn ZString tcl_get_string_result(Tcl_Interp* interp) @extern("Tcl_GetStringResult");  
extern fn ZString tcl_posix_error(Tcl_Interp* interp) @extern("Tcl_PosixError");
extern fn Tcl_Obj* tcl_new_string_obj(ZString bytes, CUInt length) @extern("Tcl_NewStringObj");
extern fn CInt tcl_fs_chdir(Tcl_Obj* path_ptr) @extern("Tcl_FSChdir");
extern fn CInt tcl_get_errno() @extern("Tcl_GetErrno");
extern fn ZString tcl_errorno_msg(CInt errorno) @extern("Tcl_ErrnoMsg");
extern fn void tcl_db_incr_ref_count(Tcl_Obj* obj_ptr, ZString file, CInt line) @extern("Tcl_DbIncrRefCount");
extern fn void tcl_db_decr_ref_count(Tcl_Obj* obj_ptr, ZString file, CInt line) @extern("Tcl_DbDecrRefCount");
macro void tcl_incr_ref_count(Tcl_Obj* obj_ptr) => tcl_db_incr_ref_count(obj_ptr, $$FILE, $$LINE);
macro void tcl_decr_ref_count(Tcl_Obj* obj_ptr) => tcl_db_decr_ref_count(obj_ptr, $$FILE, $$LINE);

/*

*/